function Get-DropBox() {
  $hostFile = Join-Path (Split-Path (Get-ItemProperty HKCU:\Software\Dropbox).InstallPath) "host.db"
  $encodedPath = [System.Convert]::FromBase64String((Get-Content $hostFile)[1])
  [System.Text.Encoding]::UTF8.GetString($encodedPath)
}

function Reboot-IfRequired() { 
  if(Test-PendingReboot){ 
    Write-Host "Test-PendingReboot shows a reboot is required. Rebooting now"
    Invoke-Reboot
  }
  else {
    Write-Host "No reboot is required. installation continuing"
  }
}

function Write-PendingReboot() { 
  if(Test-PendingReboot) {
    Write-Host "BoxStarter Reboot is pending"
  }
  else {
    Write-Host "No Reboot pending"
  }
}

try {
    #windows settings   
    Set-ExplorerOptions -showFileExtensions
    Enable-RemoteDesktop
    Disable-UAC
    Reboot-IfRequired

    cinst DotNet4.5
    Reboot-IfRequired

    #visual studio 2012 professional
    $vsinstaller = '\\vmware-host\Shared Folders\Data\VSInstall\vs_professional.exe'
    $sqlinstaller = '\\vmware-host\Shared Folders\Data\sqlserver2012\setup.exe'


    $client = New-Object system.net.WebClient;
    $client.DownloadFile("https://raw.github.com/flimble/boxstarter-config/master/vsstudio2012admindeployment.xml","admindeployment.xml");
    $vsadminFile = 'admindeployment.xml'

    $devenvPath = "$($Boxstarter.programFiles86)\Microsoft Visual Studio 11.0\Common7\IDE\devenv.exe"
    if((Test-Path $devenvPath) -eq $false) {
      Write-Host "Installing Visual Studio 2012 as it is not already on path $devenvPath"
      
      $vsargs = "/Quiet /NoRestart /AdminFile $vsadminFile /Log $env:temp\vs.log"

      $validExitCodes = 0

      $psi = new-object System.Diagnostics.ProcessStartInfo;
      $psi.FileName = $exeToRun;
      $psi.Arguments = $vsargs;
      $psi.Verb = 'runas'

      $s = [System.Diagnostics.Process]::Start($psi);
      $s.WaitForExit();
      if ($validExitCodes -notcontains $s.ExitCode) {
        $errorMessage = "[ERROR] Running $exeToRun with $statements was not successful. Exit code was `'$($s.ExitCode)`'."
        Write-Error $errorMessage
        throw $errorMessage
      }


      
      $exitCode = start-process -FilePath $vsinstaller -ArgumentList $vsargs -Wait
      
      Reboot-IfRequired
    }
    else { 
      Write-Host "VS2012 already installed as devenv.exe found on path $devenvPath"
    }

    #sql server develop edition
    $sqlinstances = (get-itemproperty 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server').InstalledInstances
    if($instances.count -gt 0) {
      Write-Host "SQL Server 2012 already installed"
    }
    else {
      Write-Host "Installing SQL Server 2012"
       $adminsGroupName = (New-Object Security.Principal.SecurityIdentifier 'S-1-5-32-544').Translate([Security.Principal.NTAccount]).Value 
    #& $sqlinstaller /q /INDICATEPROGRESS /ACTION=Install /FEATURES=SQL,Tools /TCPENABLED=1 /INSTANCENAME=MSSQLSERVER /SQLSVCACCOUNT="NT AUTHORITY\Network Service" #/SQLSYSADMINACCOUNTS="$adminsGroupName" /AGTSVCACCOUNT="NT AUTHORITY\Network Service" /IACCEPTSQLSERVERLICENSETERMS 
    }



    #enable use of local chocolatey cache
    #$cachePath = 'C:\ChocolateyCachedInstallers'
    #if(!(Test-Path -Path $cachePath)){
    #  New-Item -ItemType directory -Path $cachePath
    #}
    #$env:ChocolateyLocalCachePath = $cachePath
  	


  	#move personal content to dropbox directory. removed as need to set the location on install
  	#cinst dropbox
  	#$dropbox_dir = Get-DropBox
  	#Move-LibraryDirectory "Downloads" "$dropbox_dir\Downloads"  -DoNotMoveOldContent
  	#Move-LibraryDirectory "My Music" "$dropbox_dir\Music" -DoNotMoveOldContent
  	#Move-LibraryDirectory "My Pictures" "$dropbox_dir\Pictures" -DoNotMoveOldContent
  	#Move-LibraryDirectory "My Video" "$dropbox_dir\Media" -DoNotMoveOldContent
  	

  	#add taskbar shortcuts
  	Install-ChocolateyPinnedTaskBarItem "$env:windir\system32\mstsc.exe"
  	Install-ChocolateyPinnedTaskBarItem "$env:windir\system32\WindowsPowerShell\v1.0\powershell.exe"



    if((Get-Item "$($Boxstarter.programFiles86)\Microsoft Visual Studio 11.0\Common7\IDE\devenv.exe").VersionInfo.ProductVersion -lt "11.0.60115.1") {
        Install-ChocolateyPackage 'vs update 4' 'exe' '/passive /norestart' 'http://download.microsoft.com/download/D/4/8/D48D1AC2-A297-4C9E-A9D0-A218E6609F06/VSU4/VS2012.4.exe'
        Reboot-IfRequired
    }

    # get rid of upper case menu in Visual Studio
    Set-ItemProperty -Path HKCU:\Software\Microsoft\VisualStudio\11.0\General -Name SuppressUppercaseConversion -Type DWord -Value 1 

    #install visual studio tools
    Reboot-IfRequired
	  Install-ChocolateyVsixPackage nugettools http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c/file/37502/36/NuGet.Tools.vsix
	  cinst resharper -version 7.1.3000.2254
    cinst dotCover

		

    #install windows features
    cinst IIS-WebServerRole -source windowsfeatures
    cinst TelnetClient -source windowsFeatures
    Reboot-IfRequired
    

    #leave the chocolatey packages to my default packages.config
  	$client = New-Object system.net.WebClient;
  	$client.DownloadFile("https://raw.github.com/flimble/chocolatey-config/master/packages.config","packages.config");
  	cinst packages.config
    Reboot-IfRequired	

	  Install-WindowsUpdate -AcceptEula
    Reboot-IfRequired

    Write-ChocolateySuccess 'DevMachine.Repave'

} catch {
  Write-ChocolateyFailure 'DevMachine.Repave' $($_.Exception.Message)
  throw
}